"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("./models/database");
const express = require("express");
const path = require("path");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const nocache = require("nocache");
const configs_1 = require("./configs");
const uuid_1 = require("uuid");
const user_model_1 = require("./models/user-model");
const private_executor_model_1 = require("./models/private_executor-model");
const execution_district_model_1 = require("./models/execution_district-model");
const typeorm_1 = require("typeorm");
async function getLoggedUser(req) {
    if (req.signedCookies[configs_1.cookieName] == undefined)
        return;
    return user_model_1.User.findOne(JSON.parse(req.signedCookies[configs_1.cookieName]).login);
}
const app = express();
app.use(nocache());
app.set('view engine', 'ejs');
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true, limit: 3000000 }));
app.use(bodyParser.json({ limit: 3000000 }));
app.use(bodyParser.text({ limit: 30000000 }));
app.use(express.static(path.join(__dirname, 'static')));
app.use((req, res, next) => {
    res.set('Cache-Control', 'no-store');
    next();
});
app.get('/', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    const role = (loggedUser == undefined) ? 0 : loggedUser.role;
    const { fullname, district_id, is_active, certificate_num } = req.query;
    let searchObj = {};
    if (fullname != undefined && fullname != "")
        searchObj.fullname = typeorm_1.Like('%' + fullname + '%');
    if (certificate_num != undefined && certificate_num != "")
        searchObj.certificate_num = typeorm_1.Like('%' + certificate_num + '%');
    if (district_id != undefined)
        searchObj.district_id = district_id;
    if (is_active != undefined)
        searchObj.is_active = is_active;
    const privateExecutors = (Object.keys(searchObj).length > 0) ? (await private_executor_model_1.PrivateExecutor.find(searchObj)) : [];
    console.log(req.query, { fullname, district_id, is_active, certificate_num });
    res.render('pages/main', {
        role,
        fullname, district_id, is_active, certificate_num,
        districts: await execution_district_model_1.ExecutionDistrict.find(),
        privateExecutors: privateExecutors
    });
});
app.get('/login', (req, res) => {
    res.render('pages/login');
});
app.get('/priv-exec/list', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/registrator/list', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/event-journal', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/priv-exec/new', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/priv-exec/edit', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/registrator/new', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/registrator/edit', async (req, res) => {
    const loggedUser = await getLoggedUser(req);
    if (loggedUser == undefined)
        return res.redirect('/error/permission-denied');
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.get('/error/permission-denied', async (req, res) => {
    //res.sendFile(path.join(__dirname,'public/index.html'));
});
app.post('/api/auth/login', async (req, res) => {
    const { login, password } = req.body;
    const userData = await user_model_1.User.findOne(login);
    if (userData.pwd_hash === password && userData.is_active === true) {
        res.cookie(configs_1.cookieName, JSON.stringify({ login, password }), configs_1.cookieOptions);
        res.status(200).send();
    }
    else {
        res.status(400).send();
    }
});
app.post('/api/auth/logout', async (req, res) => {
    res.clearCookie(configs_1.cookieName, configs_1.cookieOptions);
    res.status(200).send();
});
app.post('/api/user', async (req, res) => {
    const { fullname, additional_data } = req.body;
    const identificationData = {
        login: uuid_1.v1(),
        password: uuid_1.v4()
    };
    if (await user_model_1.User.findOne({ fullname }) == undefined) {
        const user = new user_model_1.User();
        user.login = identificationData.login;
        user.pwd_hash = identificationData.password;
        user.fullname = fullname;
        user.role = 1;
        user.date_registration = (new Date()).toISOString();
        user.is_active = true;
        user.additional_data = additional_data;
        await user.save();
        res.json(identificationData);
    }
    else {
        res.status(400).send();
    }
});
app.post('/api/user/:login/res_id', async (req, res) => {
    const user = await user_model_1.User.findOne(req.params.login);
    if (user == undefined) {
        return res.status(400).send();
    }
    user.login = uuid_1.v1();
    user.pwd_hash = uuid_1.v4();
    await user.save();
    res.status(200).send();
});
app.put('/api/user/:login', async (req, res) => {
    const { fullname, additional_data, is_active } = req.body;
    const user = await user_model_1.User.findOne(req.params.login);
    if (user == undefined) {
        return res.status(400).send();
    }
    if (fullname != undefined)
        user.fullname = fullname;
    if (is_active != undefined)
        user.is_active = is_active;
    if (additional_data != undefined)
        user.additional_data = additional_data;
    await user.save();
    res.status(200).send();
});
app.delete('/api/user/:login', async (req, res) => {
    await user_model_1.User.remove(req.params.login);
    res.status(200).send();
});
app.post('/api/priv-exec', async (req, res) => {
    const { fullname, district_id, certificate_num, rec_certif_on, office_addr, started_out_on } = req.body;
    const user_login = JSON.parse(req.signedCookies[configs_1.cookieName]).login;
    if (await private_executor_model_1.PrivateExecutor.findOne({ fullname }) == undefined) {
        const privExec = new private_executor_model_1.PrivateExecutor();
        privExec.fullname = fullname;
        privExec.user = await user_model_1.User.findOne(user_login);
        privExec.district = await execution_district_model_1.ExecutionDistrict.findOne(district_id);
        privExec.is_active = true;
        privExec.created_on = (new Date()).toISOString();
        privExec.certificate_num = certificate_num;
        privExec.rec_certif_on = rec_certif_on;
        privExec.office_addr = office_addr;
        privExec.started_out_on = started_out_on;
        await privExec.save();
        res.status(200).send();
    }
    else {
        res.status(400).send();
    }
});
app.put('/api/priv-exec/:id', async (req, res) => {
    const { fullname, district_id, certificate_num, rec_certif_on, office_addr, started_out_on, is_active } = req.body;
    const privExec = await private_executor_model_1.PrivateExecutor.findOne(req.params.id);
    if (privExec == undefined) {
        return res.status(400).send();
    }
    if (fullname != undefined)
        privExec.fullname = fullname;
    if (district_id != undefined)
        privExec.district = await execution_district_model_1.ExecutionDistrict.findOne(district_id);
    if (certificate_num != undefined)
        privExec.certificate_num = certificate_num;
    if (rec_certif_on != undefined)
        privExec.rec_certif_on = rec_certif_on;
    if (office_addr != undefined)
        privExec.office_addr = office_addr;
    if (started_out_on != undefined)
        privExec.started_out_on = started_out_on;
    if (is_active != undefined)
        privExec.is_active = is_active;
    await privExec.save();
    res.status(200).send();
});
app.delete('/api/priv-exec/:id', async (req, res) => {
    await private_executor_model_1.PrivateExecutor.remove(req.params.id);
    res.status(200).send();
});
app.use((err, req, resp, next) => {
    console.log(err);
    resp.status(500).send('ERROR');
});
process.on('SIGINT', async () => (await database_1.default).close().then(() => process.exit()));
(async function () {
    const connection = await database_1.default;
    //await connection.synchronize();
    app.listen(process.env.PORT || 5000, () => {
        console.log("Started server!");
    });
})();
//# sourceMappingURL=data:application/json;base64,